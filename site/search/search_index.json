{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Beginner's Guide This guide is designed to help you learn step-by-step through different levels of complexity. Choose your starting point below: Simple : Get started with the basics. Medium : Dive into more advanced topics. Hard : Tackle complex scenarios and optimization. How to Use This Guide Simple : Ideal for absolute beginners or those who need a refresher on the fundamentals. Medium : For users who have a basic understanding and want to explore intermediate concepts. Hard : For advanced users looking to master complex topics and tackle real-world challenges. Happy learning!","title":"Home"},{"location":"#welcome-to-the-beginners-guide","text":"This guide is designed to help you learn step-by-step through different levels of complexity. Choose your starting point below: Simple : Get started with the basics. Medium : Dive into more advanced topics. Hard : Tackle complex scenarios and optimization.","title":"Welcome to the Beginner's Guide"},{"location":"#how-to-use-this-guide","text":"Simple : Ideal for absolute beginners or those who need a refresher on the fundamentals. Medium : For users who have a basic understanding and want to explore intermediate concepts. Hard : For advanced users looking to master complex topics and tackle real-world challenges. Happy learning!","title":"How to Use This Guide"},{"location":"1.%20simple/","text":"Bookr Project Guide for Beginners Introduction Overview : Brief description of the Bookr project. Technologies : FastAPI, PostgreSQL, SQLAlchemy. Purpose : Learn how to build a web application with modern technologies. Prerequisites Basic knowledge of Python. Familiarity with SQL. Basic understanding of REST APIs. Getting Started Setup Guide database Guide Endpoints Guide Running the Application Start the Server bash uvicorn app.main:app --reload Testing the API Open SWAGGER in your browser to access the interactive API documentation.","title":"Simple"},{"location":"1.%20simple/#bookr-project-guide-for-beginners","text":"","title":"Bookr Project Guide for Beginners"},{"location":"1.%20simple/#introduction","text":"Overview : Brief description of the Bookr project. Technologies : FastAPI, PostgreSQL, SQLAlchemy. Purpose : Learn how to build a web application with modern technologies.","title":"Introduction"},{"location":"1.%20simple/#prerequisites","text":"Basic knowledge of Python. Familiarity with SQL. Basic understanding of REST APIs.","title":"Prerequisites"},{"location":"1.%20simple/#getting-started","text":"Setup Guide database Guide Endpoints Guide","title":"Getting Started"},{"location":"1.%20simple/#running-the-application","text":"Start the Server bash uvicorn app.main:app --reload Testing the API Open SWAGGER in your browser to access the interactive API documentation.","title":"Running the Application"},{"location":"1.%20simple/docs/basic_structure/","text":"Project Structure Overview bookr_project/ The bookr_project/ directory contains the following structure: bookr_project/ \u251c\u2500\u2500 app/ \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 main.py \u2502 \u251c\u2500\u2500 api/ \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 endpoints/ \u2502 \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 book.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 user.py \u2502 \u2502 \u251c\u2500\u2500 dependencies.py \u2502 \u2502 \u2514\u2500\u2500 utils.py \u2502 \u251c\u2500\u2500 core/ \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 config.py \u2502 \u2502 \u2514\u2500\u2500 security.py \u2502 \u251c\u2500\u2500 db/ \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 base.py \u2502 \u2502 \u251c\u2500\u2500 models.py \u2502 \u2502 \u251c\u2500\u2500 schemas.py \u2502 \u2502 \u2514\u2500\u2500 crud.py \u2502 \u251c\u2500\u2500 migrations/ \u2502 \u2502 \u251c\u2500\u2500 versions/ \u2502 \u2502 \u2514\u2500\u2500 env.py \u2502 \u2514\u2500\u2500 services/ \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 book_service.py \u2502 \u2514\u2500\u2500 user_service.py \u251c\u2500\u2500 alembic.ini \u251c\u2500\u2500 .env \u251c\u2500\u2500 .venv \u251c\u2500\u2500 requirements/ \u2502 \u251c\u2500\u2500 base.text \u2502 \u251c\u2500\u2500 prod.text \u2502 \u2514\u2500\u2500 dev.text \u251c\u2500\u2500 README.md \u2514\u2500\u2500 tests/ \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 test_book.py \u251c\u2500\u2500 test_user.py \u2514\u2500\u2500 test_crud.py Description of Files and Folders app/ Contains the main application code. __init__.py : Initializes the app package. main.py : Entry point for the FastAPI application, including router setups. api/ Contains API-related code. endpoints/ : Defines the API endpoints. dependencies.py : Contains common dependencies and utilities. utils.py : Utility functions for the API. core/ Contains core configuration and security logic. config.py : Configuration settings (e.g., environment variables). security.py : Security-related functions (e.g., password hashing). db/ Database-related code. base.py : Base class for SQLAlchemy models. models.py : SQLAlchemy models. schemas.py : Pydantic schemas for data validation. crud.py : CRUD operations for database interactions. migrations/ Alembic migration files. versions/ : Contains migration scripts. env.py : Alembic environment configuration. services/ Contains business logic and service layer. Other Files alembic.ini : Alembic configuration file for managing migrations. .env : Environment variables file for sensitive data (e.g., database credentials). requirements.txt : Lists project dependencies. README.md : Provides a summary of the project, setup instructions, and usage guidelines. tests/ Contains test cases for different parts of the application. - test_crud.py : Tests for CRUD operations. Benefits of This Structure Separation of Concerns : Keeps code organized by functionality (API, database, services). Modularity : Makes it easier to maintain and extend the application. Scalability : Facilitates adding new features or components without disrupting existing code. Testing : Encourages organized testing with dedicated test files and directories. back to SETUP","title":"Project Structure Overview"},{"location":"1.%20simple/docs/basic_structure/#project-structure-overview","text":"","title":"Project Structure Overview"},{"location":"1.%20simple/docs/basic_structure/#bookr_project","text":"The bookr_project/ directory contains the following structure: bookr_project/ \u251c\u2500\u2500 app/ \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 main.py \u2502 \u251c\u2500\u2500 api/ \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 endpoints/ \u2502 \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u2502 \u251c\u2500\u2500 book.py \u2502 \u2502 \u2502 \u2514\u2500\u2500 user.py \u2502 \u2502 \u251c\u2500\u2500 dependencies.py \u2502 \u2502 \u2514\u2500\u2500 utils.py \u2502 \u251c\u2500\u2500 core/ \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 config.py \u2502 \u2502 \u2514\u2500\u2500 security.py \u2502 \u251c\u2500\u2500 db/ \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 base.py \u2502 \u2502 \u251c\u2500\u2500 models.py \u2502 \u2502 \u251c\u2500\u2500 schemas.py \u2502 \u2502 \u2514\u2500\u2500 crud.py \u2502 \u251c\u2500\u2500 migrations/ \u2502 \u2502 \u251c\u2500\u2500 versions/ \u2502 \u2502 \u2514\u2500\u2500 env.py \u2502 \u2514\u2500\u2500 services/ \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 book_service.py \u2502 \u2514\u2500\u2500 user_service.py \u251c\u2500\u2500 alembic.ini \u251c\u2500\u2500 .env \u251c\u2500\u2500 .venv \u251c\u2500\u2500 requirements/ \u2502 \u251c\u2500\u2500 base.text \u2502 \u251c\u2500\u2500 prod.text \u2502 \u2514\u2500\u2500 dev.text \u251c\u2500\u2500 README.md \u2514\u2500\u2500 tests/ \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 test_book.py \u251c\u2500\u2500 test_user.py \u2514\u2500\u2500 test_crud.py","title":"bookr_project/"},{"location":"1.%20simple/docs/basic_structure/#description-of-files-and-folders","text":"","title":"Description of Files and Folders"},{"location":"1.%20simple/docs/basic_structure/#app","text":"Contains the main application code. __init__.py : Initializes the app package. main.py : Entry point for the FastAPI application, including router setups.","title":"app/"},{"location":"1.%20simple/docs/basic_structure/#api","text":"Contains API-related code. endpoints/ : Defines the API endpoints. dependencies.py : Contains common dependencies and utilities. utils.py : Utility functions for the API.","title":"api/"},{"location":"1.%20simple/docs/basic_structure/#core","text":"Contains core configuration and security logic. config.py : Configuration settings (e.g., environment variables). security.py : Security-related functions (e.g., password hashing).","title":"core/"},{"location":"1.%20simple/docs/basic_structure/#db","text":"Database-related code. base.py : Base class for SQLAlchemy models. models.py : SQLAlchemy models. schemas.py : Pydantic schemas for data validation. crud.py : CRUD operations for database interactions.","title":"db/"},{"location":"1.%20simple/docs/basic_structure/#migrations","text":"Alembic migration files. versions/ : Contains migration scripts. env.py : Alembic environment configuration.","title":"migrations/"},{"location":"1.%20simple/docs/basic_structure/#services","text":"Contains business logic and service layer.","title":"services/"},{"location":"1.%20simple/docs/basic_structure/#other-files","text":"alembic.ini : Alembic configuration file for managing migrations. .env : Environment variables file for sensitive data (e.g., database credentials). requirements.txt : Lists project dependencies. README.md : Provides a summary of the project, setup instructions, and usage guidelines.","title":"Other Files"},{"location":"1.%20simple/docs/basic_structure/#tests","text":"Contains test cases for different parts of the application. - test_crud.py : Tests for CRUD operations.","title":"tests/"},{"location":"1.%20simple/docs/basic_structure/#benefits-of-this-structure","text":"Separation of Concerns : Keeps code organized by functionality (API, database, services). Modularity : Makes it easier to maintain and extend the application. Scalability : Facilitates adding new features or components without disrupting existing code. Testing : Encourages organized testing with dedicated test files and directories. back to SETUP","title":"Benefits of This Structure"},{"location":"1.%20simple/docs/main/","text":"Create the Main Application In app/main.py , set up the FastAPI application: from fastapi import Depends, FastAPI, HTTPException from sqlalchemy.orm import Session from .db import crud, models, schemas from .db.base import SessionLocal, engine from .endpoints import book, publisher models.Base.metadata.create_all(bind=engine) app = FastAPI() # Dependency def get_db(): db = SessionLocal() try: yield db finally: db.close() # Include routers app.include_router(book.router, prefix=\"/books\", tags=[\"BOOKS\"]) app.include_router(publisher.router, prefix=\"/publisher\", tags=[\"PUBLISHER\"]) Go to DATABASE INIT GUIDE or back to README","title":"Main"},{"location":"1.%20simple/docs/main/#create-the-main-application","text":"In app/main.py , set up the FastAPI application: from fastapi import Depends, FastAPI, HTTPException from sqlalchemy.orm import Session from .db import crud, models, schemas from .db.base import SessionLocal, engine from .endpoints import book, publisher models.Base.metadata.create_all(bind=engine) app = FastAPI() # Dependency def get_db(): db = SessionLocal() try: yield db finally: db.close() # Include routers app.include_router(book.router, prefix=\"/books\", tags=[\"BOOKS\"]) app.include_router(publisher.router, prefix=\"/publisher\", tags=[\"PUBLISHER\"]) Go to DATABASE INIT GUIDE or back to README","title":"Create the Main Application"},{"location":"1.%20simple/docs/setup/","text":"Setup Install Required Tools Install Python 3.8+. Install PostgreSQL. Install an IDE (like VSCode). Set Up Directory Structure please refer to the Structure Guide . Create and Activate Virtual Environment Windows: bash python -m venv .venv .venv\\Scripts\\activate macOS/Linux: bash python -m venv .venv source .venv/bin/activate Install Dependencies With the virtual environment activated, install the required packages using pip: bash pip install fastapi uvicorn sqlalchemy psycopg2-binary Go to DATABASE GUIDE or back to README","title":"Setup"},{"location":"1.%20simple/docs/setup/#setup","text":"Install Required Tools Install Python 3.8+. Install PostgreSQL. Install an IDE (like VSCode). Set Up Directory Structure please refer to the Structure Guide . Create and Activate Virtual Environment Windows: bash python -m venv .venv .venv\\Scripts\\activate macOS/Linux: bash python -m venv .venv source .venv/bin/activate Install Dependencies With the virtual environment activated, install the required packages using pip: bash pip install fastapi uvicorn sqlalchemy psycopg2-binary Go to DATABASE GUIDE or back to README","title":"Setup"},{"location":"1.%20simple/docs/db/CRUD/","text":"from sqlalchemy.orm import Session from . import models, schemas def get_book(db: Session, book_id: int): \"\"\" Get a book by its ID. \"\"\" return db.query(models.Book).filter(models.Book.id == book_id).first() def get_books(db: Session, skip: int = 0, limit: int = 100): \"\"\" Get a list of books with optional pagination. \"\"\" return db.query(models.Book).offset(skip).limit(limit).all() def create_book(db: Session, book: schemas.BookCreate): \"\"\" Create a new book record. \"\"\" db_book = models.Book( title=book.title, publication_date=book.publication_date, isbn=book.isbn, publisher_id=book.publisher_id, cover=book.cover, sample=book.sample ) db.add(db_book) db.commit() db.refresh(db_book) return db_book def update_book(db: Session, book_id: int, book: schemas.BookCreate): \"\"\" Update an existing book record by its ID. \"\"\" db_book = db.query(models.Book).filter(models.Book.id == book_id).first() if db_book: db_book.title = book.title db_book.publication_date = book.publication_date db_book.isbn = book.isbn db_book.publisher_id = book.publisher_id db_book.cover = book.cover db_book.sample = book.sample db.commit() db.refresh(db_book) return db_book def delete_book(db: Session, book_id: int): \"\"\" Delete a book record by its ID. \"\"\" db_book = db.query(models.Book).filter(models.Book.id == book_id).first() if db_book: db.delete(db_book) db.commit() return db_book Explanation: get_book : Retrieves a book by its ID from the database. get_books : Retrieves a list of books with optional pagination (using skip and limit ). create_book : Creates a new book record based on the provided schemas.BookCreate data. Adds the new book to the database, commits the transaction, and returns the created book. update_book : Updates an existing book record by its ID with the provided data. Finds the book, updates its fields, commits the transaction, and returns the updated book. delete_book : Deletes a book record by its ID. Finds the book, deletes it, commits the transaction, and returns the deleted book. Go to MAIN GUIDE or back to DATABASE INIT GUIDE","title":"CRUD"},{"location":"1.%20simple/docs/db/CRUD/#explanation","text":"get_book : Retrieves a book by its ID from the database. get_books : Retrieves a list of books with optional pagination (using skip and limit ). create_book : Creates a new book record based on the provided schemas.BookCreate data. Adds the new book to the database, commits the transaction, and returns the created book. update_book : Updates an existing book record by its ID with the provided data. Finds the book, updates its fields, commits the transaction, and returns the updated book. delete_book : Deletes a book record by its ID. Finds the book, deletes it, commits the transaction, and returns the deleted book. Go to MAIN GUIDE or back to DATABASE INIT GUIDE","title":"Explanation:"},{"location":"1.%20simple/docs/db/__init__/","text":"Initializing the FastAPI Project with SQL Databases Getting Started Basic Guid Models & Schemas Guid Crud Guid Main Guid Conclusion By following these steps, you can set up a FastAPI project with SQL databases. For more detailed explanations and additional features, please refer to the official FastAPI SQL Databases Tutorial . Go to ENDPOINTS INIT Guide or back to README","title":"Initializing the FastAPI Project with SQL Databases"},{"location":"1.%20simple/docs/db/__init__/#initializing-the-fastapi-project-with-sql-databases","text":"","title":"Initializing the FastAPI Project with SQL Databases"},{"location":"1.%20simple/docs/db/__init__/#getting-started","text":"Basic Guid Models & Schemas Guid Crud Guid Main Guid","title":"Getting Started"},{"location":"1.%20simple/docs/db/__init__/#conclusion","text":"By following these steps, you can set up a FastAPI project with SQL databases. For more detailed explanations and additional features, please refer to the official FastAPI SQL Databases Tutorial . Go to ENDPOINTS INIT Guide or back to README","title":"Conclusion"},{"location":"1.%20simple/docs/db/basic/","text":"Define the Database Configuration In db/base.py , set up your database configuration: from sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker SQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\" # SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\" engine = create_engine( SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False} # check_same_thread is only for sqlite. ) SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine) Base = declarative_base() Go to MODELS & SCHEMAS GUIDE or back to DATABASE INIT GUIDE","title":"Basic"},{"location":"1.%20simple/docs/db/basic/#define-the-database-configuration","text":"In db/base.py , set up your database configuration: from sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker SQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\" # SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\" engine = create_engine( SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False} # check_same_thread is only for sqlite. ) SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine) Base = declarative_base() Go to MODELS & SCHEMAS GUIDE or back to DATABASE INIT GUIDE","title":"Define the Database Configuration"},{"location":"1.%20simple/docs/db/models_%26_schema/","text":"Guide to Creating SQLAlchemy Models and Pydantic Schemas Define your database models & schema in db/models.py & db/schema.py : Here\u2019s a refined version of your notes and comparison table for better clarity and presentation: Notes: - Models : ORMs (Object-Relational Mappers) like SQLAlchemy are used to interact with databases by mapping Python objects to database tables. They simplify defining and managing database schemas and performing CRUD (Create, Read, Update, Delete) operations. Schema : In the context of data validation and serialization, schemas define the structure and rules for data. They ensure that data conforms to specific formats and constraints. 1. Publisher Model SQLAlchemy Model Create a file named models.py . Import necessary modules: Column , Integer , String from sqlalchemy and declarative_base from sqlalchemy.ext.declarative . Define a Base class using declarative_base() . Define a Publisher class that inherits from Base . Define the table name using __tablename__ . Define the columns: id , name , website , and email . Implement the __str__ method to return the publisher's name. Pydantic Schema Create a file named schemas.py . Import necessary modules: BaseModel , EmailStr , and HttpUrl from pydantic . Define a PublisherBase class that inherits from BaseModel . Define the fields: name , website , and email . Define a PublisherCreate class that inherits from PublisherBase . Define a Publisher class that inherits from PublisherBase . Add an id field to the Publisher class. Set the orm_mode to True in the Config class of the Publisher . 2. Book Model SQLAlchemy Model Continue editing models.py . Import necessary modules: Date , ForeignKey from sqlalchemy and relationship from sqlalchemy.orm . Define a Book class that inherits from Base . Define the table name using __tablename__ . Define the columns: id , title , publication_date , isbn , publisher_id , cover , and sample . Define relationships: publisher and contributors . Implement the __str__ method to return the book's title and ISBN. Pydantic Schema Continue editing schemas.py . Import necessary modules: date from datetime and List , Optional from typing . Define a BookBase class that inherits from BaseModel . Define the fields: title , publication_date , isbn , and publisher_id . Define a BookCreate class that inherits from BookBase . Define a Book class that inherits from BookBase . Add additional fields: id , cover , sample , publisher , and contributors . Set the orm_mode to True in the Config class of the Book . 3. Contributor Model SQLAlchemy Model Continue editing models.py . Define a Contributor class that inherits from Base . Define the table name using __tablename__ . Define the columns: id , first_names , last_names , and email . Implement a method initialled_name to return the contributor's name with initials. Implement the __str__ method to return the contributor's initialled name. Pydantic Schema Continue editing schemas.py . Define a ContributorBase class that inherits from BaseModel . Define the fields: first_names , last_names , and email . Define a ContributorCreate class that inherits from ContributorBase . Define a Contributor class that inherits from ContributorBase . Add an id field to the Contributor class. Set the orm_mode to True in the Config class of the Contributor . 4. BookContributor Model SQLAlchemy Model Continue editing models.py . Import necessary modules: TextChoices from django.db.models . Define a BookContributor class that inherits from Base . Define the table name using __tablename__ . Define a nested ContributionRole class that inherits from TextChoices . Define the choices: AUTHOR , CO_AUTHOR , and EDITOR . Define the columns: book_id , contributor_id , and role . Implement the __str__ method to return the contributor's name and role. Pydantic Schema Continue editing schemas.py . Define a BookContributorBase class that inherits from BaseModel . Define the fields: book_id , contributor_id , and role . Define a BookContributorCreate class that inherits from BookContributorBase . Define a BookContributor class that inherits from BookContributorBase . Add an id field to the BookContributor class. Set the orm_mode to True in the Config class of the BookContributor . 5. Review Model SQLAlchemy Model Continue editing models.py . Import necessary modules: TextField , DateTimeField , auth.get_user_model from django . Define a Review class that inherits from Base . Define the table name using __tablename__ . Define the columns: id , content , rating , date_created , date_edited , creator_id , and book_id . Implement the __str__ method to return the reviewer's username and book title. Pydantic Schema Continue editing schemas.py . Define a ReviewBase class that inherits from BaseModel . Define the fields: content , rating , date_created , date_edited , creator_id , and book_id . Define a ReviewCreate class that inherits from ReviewBase . Define a Review class that inherits from ReviewBase . Add an id field to the Review class. Set the orm_mode to True in the Config class of the Review . Go to CRUD GUIDE or back to DATABASE INIT GUIDE","title":"Guide to Creating SQLAlchemy Models and Pydantic Schemas"},{"location":"1.%20simple/docs/db/models_%26_schema/#guide-to-creating-sqlalchemy-models-and-pydantic-schemas","text":"Define your database models & schema in db/models.py & db/schema.py : Here\u2019s a refined version of your notes and comparison table for better clarity and presentation: Notes: - Models : ORMs (Object-Relational Mappers) like SQLAlchemy are used to interact with databases by mapping Python objects to database tables. They simplify defining and managing database schemas and performing CRUD (Create, Read, Update, Delete) operations. Schema : In the context of data validation and serialization, schemas define the structure and rules for data. They ensure that data conforms to specific formats and constraints.","title":"Guide to Creating SQLAlchemy Models and Pydantic Schemas"},{"location":"1.%20simple/docs/db/models_%26_schema/#1-publisher-model","text":"","title":"1. Publisher Model"},{"location":"1.%20simple/docs/db/models_%26_schema/#sqlalchemy-model","text":"Create a file named models.py . Import necessary modules: Column , Integer , String from sqlalchemy and declarative_base from sqlalchemy.ext.declarative . Define a Base class using declarative_base() . Define a Publisher class that inherits from Base . Define the table name using __tablename__ . Define the columns: id , name , website , and email . Implement the __str__ method to return the publisher's name.","title":"SQLAlchemy Model"},{"location":"1.%20simple/docs/db/models_%26_schema/#pydantic-schema","text":"Create a file named schemas.py . Import necessary modules: BaseModel , EmailStr , and HttpUrl from pydantic . Define a PublisherBase class that inherits from BaseModel . Define the fields: name , website , and email . Define a PublisherCreate class that inherits from PublisherBase . Define a Publisher class that inherits from PublisherBase . Add an id field to the Publisher class. Set the orm_mode to True in the Config class of the Publisher .","title":"Pydantic Schema"},{"location":"1.%20simple/docs/db/models_%26_schema/#2-book-model","text":"","title":"2. Book Model"},{"location":"1.%20simple/docs/db/models_%26_schema/#sqlalchemy-model_1","text":"Continue editing models.py . Import necessary modules: Date , ForeignKey from sqlalchemy and relationship from sqlalchemy.orm . Define a Book class that inherits from Base . Define the table name using __tablename__ . Define the columns: id , title , publication_date , isbn , publisher_id , cover , and sample . Define relationships: publisher and contributors . Implement the __str__ method to return the book's title and ISBN.","title":"SQLAlchemy Model"},{"location":"1.%20simple/docs/db/models_%26_schema/#pydantic-schema_1","text":"Continue editing schemas.py . Import necessary modules: date from datetime and List , Optional from typing . Define a BookBase class that inherits from BaseModel . Define the fields: title , publication_date , isbn , and publisher_id . Define a BookCreate class that inherits from BookBase . Define a Book class that inherits from BookBase . Add additional fields: id , cover , sample , publisher , and contributors . Set the orm_mode to True in the Config class of the Book .","title":"Pydantic Schema"},{"location":"1.%20simple/docs/db/models_%26_schema/#3-contributor-model","text":"","title":"3. Contributor Model"},{"location":"1.%20simple/docs/db/models_%26_schema/#sqlalchemy-model_2","text":"Continue editing models.py . Define a Contributor class that inherits from Base . Define the table name using __tablename__ . Define the columns: id , first_names , last_names , and email . Implement a method initialled_name to return the contributor's name with initials. Implement the __str__ method to return the contributor's initialled name.","title":"SQLAlchemy Model"},{"location":"1.%20simple/docs/db/models_%26_schema/#pydantic-schema_2","text":"Continue editing schemas.py . Define a ContributorBase class that inherits from BaseModel . Define the fields: first_names , last_names , and email . Define a ContributorCreate class that inherits from ContributorBase . Define a Contributor class that inherits from ContributorBase . Add an id field to the Contributor class. Set the orm_mode to True in the Config class of the Contributor .","title":"Pydantic Schema"},{"location":"1.%20simple/docs/db/models_%26_schema/#4-bookcontributor-model","text":"","title":"4. BookContributor Model"},{"location":"1.%20simple/docs/db/models_%26_schema/#sqlalchemy-model_3","text":"Continue editing models.py . Import necessary modules: TextChoices from django.db.models . Define a BookContributor class that inherits from Base . Define the table name using __tablename__ . Define a nested ContributionRole class that inherits from TextChoices . Define the choices: AUTHOR , CO_AUTHOR , and EDITOR . Define the columns: book_id , contributor_id , and role . Implement the __str__ method to return the contributor's name and role.","title":"SQLAlchemy Model"},{"location":"1.%20simple/docs/db/models_%26_schema/#pydantic-schema_3","text":"Continue editing schemas.py . Define a BookContributorBase class that inherits from BaseModel . Define the fields: book_id , contributor_id , and role . Define a BookContributorCreate class that inherits from BookContributorBase . Define a BookContributor class that inherits from BookContributorBase . Add an id field to the BookContributor class. Set the orm_mode to True in the Config class of the BookContributor .","title":"Pydantic Schema"},{"location":"1.%20simple/docs/db/models_%26_schema/#5-review-model","text":"","title":"5. Review Model"},{"location":"1.%20simple/docs/db/models_%26_schema/#sqlalchemy-model_4","text":"Continue editing models.py . Import necessary modules: TextField , DateTimeField , auth.get_user_model from django . Define a Review class that inherits from Base . Define the table name using __tablename__ . Define the columns: id , content , rating , date_created , date_edited , creator_id , and book_id . Implement the __str__ method to return the reviewer's username and book title.","title":"SQLAlchemy Model"},{"location":"1.%20simple/docs/db/models_%26_schema/#pydantic-schema_4","text":"Continue editing schemas.py . Define a ReviewBase class that inherits from BaseModel . Define the fields: content , rating , date_created , date_edited , creator_id , and book_id . Define a ReviewCreate class that inherits from ReviewBase . Define a Review class that inherits from ReviewBase . Add an id field to the Review class. Set the orm_mode to True in the Config class of the Review . Go to CRUD GUIDE or back to DATABASE INIT GUIDE","title":"Pydantic Schema"},{"location":"1.%20simple/docs/endpoints/__init__/","text":"Initializing the FastAPI Project with endpoint's Getting Started Book Endpoints Publisher Endpoints back to README","title":"Initializing the FastAPI Project with endpoint's"},{"location":"1.%20simple/docs/endpoints/__init__/#initializing-the-fastapi-project-with-endpoints","text":"","title":"Initializing the FastAPI Project with endpoint's"},{"location":"1.%20simple/docs/endpoints/__init__/#getting-started","text":"Book Endpoints Publisher Endpoints back to README","title":"Getting Started"},{"location":"1.%20simple/docs/endpoints/book/","text":"app/endpoints/book.py This file defines the routes for handling book-related operations in the FastAPI application. Router Definition router = APIRouter() Routes List All Books @router.get(\"/\", response_model=List[schemas.Book]) Get Book Details @router.get(\"/{book_id}\", response_model=schemas.Book) Create New Review @router.post(\"/{book_id}/review/new/\", response_model=schemas.Review) Edit Review @router.put(\"/{book_id}/review/{review_id}/\", response_model=schemas.Review) Get Book Media @router.get(\"/{book_id}/media/\", response_model=schemas.BookMedia) Search Books @router.get(\"/search/\", response_model=List[schemas.Book]) Go to PUBLISHER ENDPOINTS or back to README","title":"app/endpoints/book.py"},{"location":"1.%20simple/docs/endpoints/book/#appendpointsbookpy","text":"This file defines the routes for handling book-related operations in the FastAPI application.","title":"app/endpoints/book.py"},{"location":"1.%20simple/docs/endpoints/book/#router-definition","text":"router = APIRouter()","title":"Router Definition"},{"location":"1.%20simple/docs/endpoints/book/#routes","text":"","title":"Routes"},{"location":"1.%20simple/docs/endpoints/book/#list-all-books","text":"@router.get(\"/\", response_model=List[schemas.Book])","title":"List All Books"},{"location":"1.%20simple/docs/endpoints/book/#get-book-details","text":"@router.get(\"/{book_id}\", response_model=schemas.Book)","title":"Get Book Details"},{"location":"1.%20simple/docs/endpoints/book/#create-new-review","text":"@router.post(\"/{book_id}/review/new/\", response_model=schemas.Review)","title":"Create New Review"},{"location":"1.%20simple/docs/endpoints/book/#edit-review","text":"@router.put(\"/{book_id}/review/{review_id}/\", response_model=schemas.Review)","title":"Edit Review"},{"location":"1.%20simple/docs/endpoints/book/#get-book-media","text":"@router.get(\"/{book_id}/media/\", response_model=schemas.BookMedia)","title":"Get Book Media"},{"location":"1.%20simple/docs/endpoints/book/#search-books","text":"@router.get(\"/search/\", response_model=List[schemas.Book]) Go to PUBLISHER ENDPOINTS or back to README","title":"Search Books"},{"location":"1.%20simple/docs/endpoints/publisher/","text":"app/endpoints/publisher.py Router Definition router = APIRouter() Routes Create New Publisher @router.post(\"/\", response_model=schemas.Publisher) Edit Publisher @router.put(\"/{publisher_id}/\", response_model=schemas.Publisher) Go to ENDPOINTS or back to README","title":"app/endpoints/publisher.py"},{"location":"1.%20simple/docs/endpoints/publisher/#appendpointspublisherpy","text":"","title":"app/endpoints/publisher.py"},{"location":"1.%20simple/docs/endpoints/publisher/#router-definition","text":"router = APIRouter()","title":"Router Definition"},{"location":"1.%20simple/docs/endpoints/publisher/#routes","text":"","title":"Routes"},{"location":"1.%20simple/docs/endpoints/publisher/#create-new-publisher","text":"@router.post(\"/\", response_model=schemas.Publisher)","title":"Create New Publisher"},{"location":"1.%20simple/docs/endpoints/publisher/#edit-publisher","text":"@router.put(\"/{publisher_id}/\", response_model=schemas.Publisher) Go to ENDPOINTS or back to README","title":"Edit Publisher"},{"location":"2.%20medium/","text":"","title":"Medium"},{"location":"2.%20medium/endpoints/","text":"API Documentation Books API Retrieve Books GET /books/ Retrieve a list of books. Create Book POST /books/ Create a new book. Retrieve Book GET /books/{book_id} Retrieve details of a specific book. Update Book PUT /books/{book_id} Update details of a specific book. Authors API Retrieve Authors GET /authors/ Retrieve a list of authors. Create Author POST /authors/ Create a new author. Retrieve Author GET /authors/{author_id} Retrieve details of a specific author. Update Author PUT /authors/{author_id} Update details of a specific author. Users API Retrieve Users GET /users/ Retrieve a list of users. Create User POST /users/ Create a new user. Retrieve User GET /users/{user_id} Retrieve details of a specific user. Update User PUT /users/{user_id} Update details of a specific user. Categories API Retrieve Categories GET /categories/ Retrieve a list of categories. Create Category POST /categories/ Create a new category. Retrieve Category GET /categories/{category_id} Retrieve details of a specific category. Update Category PUT /categories/{category_id} Update details of a specific category. ```","title":"API Documentation"},{"location":"2.%20medium/endpoints/#api-documentation","text":"","title":"API Documentation"},{"location":"2.%20medium/endpoints/#books-api","text":"","title":"Books API"},{"location":"2.%20medium/endpoints/#retrieve-books","text":"GET /books/ Retrieve a list of books.","title":"Retrieve Books"},{"location":"2.%20medium/endpoints/#create-book","text":"POST /books/ Create a new book.","title":"Create Book"},{"location":"2.%20medium/endpoints/#retrieve-book","text":"GET /books/{book_id} Retrieve details of a specific book.","title":"Retrieve Book"},{"location":"2.%20medium/endpoints/#update-book","text":"PUT /books/{book_id} Update details of a specific book.","title":"Update Book"},{"location":"2.%20medium/endpoints/#authors-api","text":"","title":"Authors API"},{"location":"2.%20medium/endpoints/#retrieve-authors","text":"GET /authors/ Retrieve a list of authors.","title":"Retrieve Authors"},{"location":"2.%20medium/endpoints/#create-author","text":"POST /authors/ Create a new author.","title":"Create Author"},{"location":"2.%20medium/endpoints/#retrieve-author","text":"GET /authors/{author_id} Retrieve details of a specific author.","title":"Retrieve Author"},{"location":"2.%20medium/endpoints/#update-author","text":"PUT /authors/{author_id} Update details of a specific author.","title":"Update Author"},{"location":"2.%20medium/endpoints/#users-api","text":"","title":"Users API"},{"location":"2.%20medium/endpoints/#retrieve-users","text":"GET /users/ Retrieve a list of users.","title":"Retrieve Users"},{"location":"2.%20medium/endpoints/#create-user","text":"POST /users/ Create a new user.","title":"Create User"},{"location":"2.%20medium/endpoints/#retrieve-user","text":"GET /users/{user_id} Retrieve details of a specific user.","title":"Retrieve User"},{"location":"2.%20medium/endpoints/#update-user","text":"PUT /users/{user_id} Update details of a specific user.","title":"Update User"},{"location":"2.%20medium/endpoints/#categories-api","text":"","title":"Categories API"},{"location":"2.%20medium/endpoints/#retrieve-categories","text":"GET /categories/ Retrieve a list of categories.","title":"Retrieve Categories"},{"location":"2.%20medium/endpoints/#create-category","text":"POST /categories/ Create a new category.","title":"Create Category"},{"location":"2.%20medium/endpoints/#retrieve-category","text":"GET /categories/{category_id} Retrieve details of a specific category.","title":"Retrieve Category"},{"location":"2.%20medium/endpoints/#update-category","text":"PUT /categories/{category_id} Update details of a specific category. ```","title":"Update Category"},{"location":"2.%20medium/models/","text":"Updated Models: Book Model : { \"id\": \"6683f946ec61bfa6a3c2d7c7\", \"created_at\": \"2024-07-02T12:57:42.076000\", \"updated_at\": \"2024-07-02T12:57:42.076000\", \"name\": \"Harry Porter Chambers of secrets (VOLUME 1)\", \"description\": \"This is description about a book.\", \"author\": \"6683e1a4710824df4e5d76e9\", \"is_published\": false, \"category\": \"6683e1a4710824df4e5d76e9\", \"publisher\": \"6683e1a4710824df4e5d76e9\", \"average_rating\": 4.5, \"total_reviews\": 150 } Author Model : { \"id\": \"6682cdeed4646ca7d4f37874\", \"created_at\": \"2024-07-01T15:40:30.960000\", \"updated_at\": \"2024-07-02T13:04:37.931231\", \"name\": \"James\", \"latest_books\": [ { \"id\": \"6683f946ec61bfa6a3c2d7c7\", \"name\": \"Harry Porter Chambers of secrets (VOLUME 1)\" }, { \"id\": \"6683f98a7b7297bd6dcdf119\", \"name\": \"Harry Porter Chambers of secrets (VOLUME 1)\" }, { \"id\": \"6683f9afdc0e77f278b07ddf\", \"name\": \"Harry Porter Chambers of secrets (VOLUME 1)\" } ], \"age\": 25, \"gender\": \"Male\", \"awards\": [ \"Best writer of the decade - 2018 \" ], \"total_published\": 4, \"average_rating\": 4.5 } User Model : { \"id\": \"6683abe1455818257eb1d668\", \"created_at\": \"2024-07-02T07:27:29.278000\", \"updated_at\": \"2024-07-02T07:27:29.278000\", \"name\": \"Albert Joseph\", \"email\": \"test@gmail.com\", \"gender\": \"Male\", \"phone_number\": \"+918856852123\", \"age\": 25, \"favorite_books\": [ { \"id\": \"6683f946ec61bfa6a3c2d7c7\", \"name\": \"Harry Porter Chambers of secrets (VOLUME 1)\" } ], \"total_reviews\": 10 } Category Model : { \"id\": \"6683e1a4710824df4e5d76e9\", \"name\": \"Fiction\", \"description\": \"Fiction description\" } Publisher Model : { \"id\": \"6683e1a4710824df4e5d76e9\", \"name\": \"Penguin Random House\", \"location\": \"New York, USA\", \"books\": [ { \"id\": \"6683f946ec61bfa6a3c2d7c7\", \"name\": \"Harry Porter Chambers of secrets (VOLUME 1)\" } ] } Bookstore Model : { \"id\": \"6683e1a4710824df4e5d76e9\", \"name\": \"Barnes & Noble\", \"location\": \"New York, USA\", \"books\": [ { \"id\": \"6683f946ec61bfa6a3c2d7c7\", \"name\": \"Harry Porter Chambers of secrets (VOLUME 1)\" } ] } New Endpoints: Publisher Endpoints : GET /publishers : Retrieve all publishers. POST /publishers : Create a new publisher. GET /publishers/{publisher_id} : Retrieve a specific publisher. PUT /publishers/{publisher_id} : Update a specific publisher. DELETE /publishers/{publisher_id} : Delete a specific publisher. Bookstore Endpoints : GET /bookstores : Retrieve all bookstores. POST /bookstores : Create a new bookstore. GET /bookstores/{bookstore_id} : Retrieve a specific bookstore. PUT /bookstores/{bookstore_id} : Update a specific bookstore. DELETE /bookstores/{bookstore_id} : Delete a specific bookstore. POST /bookstores/{bookstore_id}/books/{book_id} : Add a book to a bookstore's stock. DELETE /bookstores/{bookstore_id}/books/{book_id} : Remove a book from a bookstore's stock. User Endpoints : GET /users/{user_id}/favorite_books : Retrieve a user's favorite books. POST /users/{user_id}/favorite_books/{book_id} : Add a book to a user's favorite books. DELETE /users/{user_id}/favorite_books/{book_id} : Remove a book from a user's favorite books. Search Endpoints : GET /search/books : Search books by name, description, author, category, or publisher. GET /search/authors : Search authors by name or awards. GET /search/categories : Search categories by name or description. GET /search/reviews : Search reviews by content, rating, or user. GET /search/users : Search users by name, email, or phone number. Example Search Endpoint Responses: Search Books : { \"results\": [ { \"id\": \"6683f946ec61bfa6a3c2d7c7\", \"name\": \"Harry Porter Chambers of secrets (VOLUME 1)\", \"author\": { \"id\": \"6683e1a4710824df4e5d76e9\", \"name\": \"James\" }, \"category\": { \"id\": \"6683e1a4710824df4e5d76e9\", \"name\": \"Fiction\" }, \"publisher\": { \"id\": \"6683e1a4710824df4e5d76e9\", \"name\": \"Penguin Random House\" }, \"average_rating\": 4.5, \"total_reviews\": 150 } ] } Search Authors : { \"results\": [ { \"id\": \"6682cdeed4646ca7d4f37874\", \"name\": \"James\", \"age\": 25, \"gender\": \"Male\", \"awards\": [ \"Best writer of the decade - 2018 \" ], \"latest_books\": [ { \"id\": \"6683f946ec61bfa6a3c2d7c7\", \"name\": \"Harry Porter Chambers of secrets (VOLUME 1)\" } ], \"total_published\": 4, \" average_rating\": 4.5 } ] } Search Categories : { \"results\": [ { \"id\": \"6683e1a4710824df4e5d76e9\", \"name\": \"Fiction\", \"description\": \"Fiction description\" } ] } Search Reviews : { \"results\": [ { \"id\": \"6683fbafb25f017d052716af\", \"content\": \"This is the content\", \"rating\": 4, \"created_by\": { \"id\": \"6683abe1455818257eb1d668\", \"name\": \"Albert Joseph\" }, \"book_id\": { \"id\": \"6683f946ec61bfa6a3c2d7c7\", \"name\": \"Harry Porter Chambers of secrets (VOLUME 1)\" }, \"review_details\": { \"likes\": 120, \"comments\": [ { \"id\": \"6683e1a4710824df4e5d76e9\", \"user\": \"John Doe\", \"content\": \"Great review!\" } ] } } ] } Search Users : { \"results\": [ { \"id\": \"6683abe1455818257eb1d668\", \"name\": \"Albert Joseph\", \"email\": \"test@gmail.com\", \"gender\": \"Male\", \"phone_number\": \"+918856852123\", \"age\": 25, \"favorite_books\": [ { \"id\": \"6683f946ec61bfa6a3c2d7c7\", \"name\": \"Harry Porter Chambers of secrets (VOLUME 1)\" } ], \"total_reviews\": 10, \"average_rating\": 4.2 } ] } Summary: Define New Models : Create Publisher and Bookstore models. Update existing models to reflect new relationships. Create Endpoints for New Models : Implement CRUD endpoints for Publisher and Bookstore . Implement endpoints for managing books in a bookstore. Update Existing Endpoints : Update the User , Book models and their respective endpoints to include new fields and relationships. Add Search Functionality : Implement search endpoints for Book , Author , Category , and User . Test All Endpoints : Ensure all new and updated endpoints work as expected. Write tests for each endpoint to validate functionality. By following this plan, you can significantly enhance the functionality of your API with more complex relationships and search capabilities. Let me know if you need detailed implementation code for any of the new endpoints or models!","title":"Models"},{"location":"2.%20medium/models/#updated-models","text":"Book Model : { \"id\": \"6683f946ec61bfa6a3c2d7c7\", \"created_at\": \"2024-07-02T12:57:42.076000\", \"updated_at\": \"2024-07-02T12:57:42.076000\", \"name\": \"Harry Porter Chambers of secrets (VOLUME 1)\", \"description\": \"This is description about a book.\", \"author\": \"6683e1a4710824df4e5d76e9\", \"is_published\": false, \"category\": \"6683e1a4710824df4e5d76e9\", \"publisher\": \"6683e1a4710824df4e5d76e9\", \"average_rating\": 4.5, \"total_reviews\": 150 } Author Model : { \"id\": \"6682cdeed4646ca7d4f37874\", \"created_at\": \"2024-07-01T15:40:30.960000\", \"updated_at\": \"2024-07-02T13:04:37.931231\", \"name\": \"James\", \"latest_books\": [ { \"id\": \"6683f946ec61bfa6a3c2d7c7\", \"name\": \"Harry Porter Chambers of secrets (VOLUME 1)\" }, { \"id\": \"6683f98a7b7297bd6dcdf119\", \"name\": \"Harry Porter Chambers of secrets (VOLUME 1)\" }, { \"id\": \"6683f9afdc0e77f278b07ddf\", \"name\": \"Harry Porter Chambers of secrets (VOLUME 1)\" } ], \"age\": 25, \"gender\": \"Male\", \"awards\": [ \"Best writer of the decade - 2018 \" ], \"total_published\": 4, \"average_rating\": 4.5 } User Model : { \"id\": \"6683abe1455818257eb1d668\", \"created_at\": \"2024-07-02T07:27:29.278000\", \"updated_at\": \"2024-07-02T07:27:29.278000\", \"name\": \"Albert Joseph\", \"email\": \"test@gmail.com\", \"gender\": \"Male\", \"phone_number\": \"+918856852123\", \"age\": 25, \"favorite_books\": [ { \"id\": \"6683f946ec61bfa6a3c2d7c7\", \"name\": \"Harry Porter Chambers of secrets (VOLUME 1)\" } ], \"total_reviews\": 10 } Category Model : { \"id\": \"6683e1a4710824df4e5d76e9\", \"name\": \"Fiction\", \"description\": \"Fiction description\" } Publisher Model : { \"id\": \"6683e1a4710824df4e5d76e9\", \"name\": \"Penguin Random House\", \"location\": \"New York, USA\", \"books\": [ { \"id\": \"6683f946ec61bfa6a3c2d7c7\", \"name\": \"Harry Porter Chambers of secrets (VOLUME 1)\" } ] } Bookstore Model : { \"id\": \"6683e1a4710824df4e5d76e9\", \"name\": \"Barnes & Noble\", \"location\": \"New York, USA\", \"books\": [ { \"id\": \"6683f946ec61bfa6a3c2d7c7\", \"name\": \"Harry Porter Chambers of secrets (VOLUME 1)\" } ] }","title":"Updated Models:"},{"location":"2.%20medium/models/#new-endpoints","text":"Publisher Endpoints : GET /publishers : Retrieve all publishers. POST /publishers : Create a new publisher. GET /publishers/{publisher_id} : Retrieve a specific publisher. PUT /publishers/{publisher_id} : Update a specific publisher. DELETE /publishers/{publisher_id} : Delete a specific publisher. Bookstore Endpoints : GET /bookstores : Retrieve all bookstores. POST /bookstores : Create a new bookstore. GET /bookstores/{bookstore_id} : Retrieve a specific bookstore. PUT /bookstores/{bookstore_id} : Update a specific bookstore. DELETE /bookstores/{bookstore_id} : Delete a specific bookstore. POST /bookstores/{bookstore_id}/books/{book_id} : Add a book to a bookstore's stock. DELETE /bookstores/{bookstore_id}/books/{book_id} : Remove a book from a bookstore's stock. User Endpoints : GET /users/{user_id}/favorite_books : Retrieve a user's favorite books. POST /users/{user_id}/favorite_books/{book_id} : Add a book to a user's favorite books. DELETE /users/{user_id}/favorite_books/{book_id} : Remove a book from a user's favorite books. Search Endpoints : GET /search/books : Search books by name, description, author, category, or publisher. GET /search/authors : Search authors by name or awards. GET /search/categories : Search categories by name or description. GET /search/reviews : Search reviews by content, rating, or user. GET /search/users : Search users by name, email, or phone number.","title":"New Endpoints:"},{"location":"2.%20medium/models/#example-search-endpoint-responses","text":"Search Books : { \"results\": [ { \"id\": \"6683f946ec61bfa6a3c2d7c7\", \"name\": \"Harry Porter Chambers of secrets (VOLUME 1)\", \"author\": { \"id\": \"6683e1a4710824df4e5d76e9\", \"name\": \"James\" }, \"category\": { \"id\": \"6683e1a4710824df4e5d76e9\", \"name\": \"Fiction\" }, \"publisher\": { \"id\": \"6683e1a4710824df4e5d76e9\", \"name\": \"Penguin Random House\" }, \"average_rating\": 4.5, \"total_reviews\": 150 } ] } Search Authors : { \"results\": [ { \"id\": \"6682cdeed4646ca7d4f37874\", \"name\": \"James\", \"age\": 25, \"gender\": \"Male\", \"awards\": [ \"Best writer of the decade - 2018 \" ], \"latest_books\": [ { \"id\": \"6683f946ec61bfa6a3c2d7c7\", \"name\": \"Harry Porter Chambers of secrets (VOLUME 1)\" } ], \"total_published\": 4, \" average_rating\": 4.5 } ] } Search Categories : { \"results\": [ { \"id\": \"6683e1a4710824df4e5d76e9\", \"name\": \"Fiction\", \"description\": \"Fiction description\" } ] } Search Reviews : { \"results\": [ { \"id\": \"6683fbafb25f017d052716af\", \"content\": \"This is the content\", \"rating\": 4, \"created_by\": { \"id\": \"6683abe1455818257eb1d668\", \"name\": \"Albert Joseph\" }, \"book_id\": { \"id\": \"6683f946ec61bfa6a3c2d7c7\", \"name\": \"Harry Porter Chambers of secrets (VOLUME 1)\" }, \"review_details\": { \"likes\": 120, \"comments\": [ { \"id\": \"6683e1a4710824df4e5d76e9\", \"user\": \"John Doe\", \"content\": \"Great review!\" } ] } } ] } Search Users : { \"results\": [ { \"id\": \"6683abe1455818257eb1d668\", \"name\": \"Albert Joseph\", \"email\": \"test@gmail.com\", \"gender\": \"Male\", \"phone_number\": \"+918856852123\", \"age\": 25, \"favorite_books\": [ { \"id\": \"6683f946ec61bfa6a3c2d7c7\", \"name\": \"Harry Porter Chambers of secrets (VOLUME 1)\" } ], \"total_reviews\": 10, \"average_rating\": 4.2 } ] }","title":"Example Search Endpoint Responses:"},{"location":"2.%20medium/models/#summary","text":"Define New Models : Create Publisher and Bookstore models. Update existing models to reflect new relationships. Create Endpoints for New Models : Implement CRUD endpoints for Publisher and Bookstore . Implement endpoints for managing books in a bookstore. Update Existing Endpoints : Update the User , Book models and their respective endpoints to include new fields and relationships. Add Search Functionality : Implement search endpoints for Book , Author , Category , and User . Test All Endpoints : Ensure all new and updated endpoints work as expected. Write tests for each endpoint to validate functionality. By following this plan, you can significantly enhance the functionality of your API with more complex relationships and search capabilities. Let me know if you need detailed implementation code for any of the new endpoints or models!","title":"Summary:"},{"location":"3.%20hard/","text":"","title":"Hard"},{"location":"3.%20hard/AWS/","text":"For advanced tasks, deploying a web application with Docker on AWS involves several complex steps. Here\u2019s a detailed guide for creating documentation on such a topic: Advanced Task: Deploying a Web Application with Docker on AWS Overview This guide will walk you through deploying a web application using Docker on AWS. It includes setting up Docker containers, configuring AWS services, and deploying the application to a scalable environment. Prerequisites Basic understanding of Docker Familiarity with AWS services Access to an AWS account A web application (e.g., built with FastAPI, Django, etc.) Steps 1. Dockerize Your Application 1.1 Create a Dockerfile Navigate to the root directory of your project. Create a file named Dockerfile and define the Docker image configuration. Example Dockerfile for a Python Web Application: # Use the official Python image from the Docker Hub FROM python:3.9-slim # Set the working directory WORKDIR /app # Copy the dependencies file COPY requirements.txt . # Install dependencies RUN pip install --no-cache-dir -r requirements.txt # Copy the application code COPY . . # Expose the port EXPOSE 8000 # Command to run the application CMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"] 1.2 Build and Test Docker Image # Build the Docker image docker build -t my-web-app . # Run the Docker container locally docker run -p 8000:8000 my-web-app 2. Set Up AWS Infrastructure 2.1 Create an AWS Account If you don\u2019t already have an AWS account, create one at aws.amazon.com . 2.2 Set Up AWS CLI Install the AWS CLI on your local machine. Configure it with your AWS credentials. aws configure 2.3 Create an Amazon Elastic Container Registry (ECR) Go to the ECR section in the AWS Management Console. Create a new repository for your Docker images. 2.4 Push Docker Image to ECR # Authenticate Docker with ECR aws ecr get-login-password --region <region> | docker login --username AWS --password-stdin <account_id>.dkr.ecr.<region>.amazonaws.com # Tag the Docker image docker tag my-web-app:latest <account_id>.dkr.ecr.<region>.amazonaws.com/my-web-app:latest # Push the Docker image docker push <account_id>.dkr.ecr.<region>.amazonaws.com/my-web-app:latest 3. Deploy to AWS 3.1 Create an Amazon Elastic Container Service (ECS) Cluster Go to the ECS section in the AWS Management Console. Create a new cluster for your application. 3.2 Define a Task Definition Create a task definition that specifies how to run your Docker container. Include the Docker image URL from ECR and specify container settings. 3.3 Set Up an ECS Service Create a new service in your ECS cluster using the task definition. Configure it to run a desired number of tasks and set up load balancing if necessary. 3.4 Configure Networking Set up an Application Load Balancer (ALB) to distribute traffic to your ECS tasks. Configure security groups to allow inbound traffic on the required ports (e.g., port 80 for HTTP). 3.5 Launch and Monitor Deploy your ECS service and verify that the application is running correctly. Use CloudWatch to monitor logs and performance metrics. 4. Automate Deployment with CI/CD 4.1 Set Up a CI/CD Pipeline Use AWS CodePipeline or GitHub Actions to automate the build and deployment process. Define steps to build the Docker image, push it to ECR, and deploy it to ECS. 4.2 Example GitHub Actions Workflow name: Deploy to ECS on: push: branches: - main jobs: deploy: runs-on: ubuntu-latest steps: - name: Checkout code uses: actions/checkout@v2 - name: Set up Docker Buildx uses: docker/setup-buildx-action@v1 - name: Log in to Amazon ECR uses: aws-actions/amazon-ecr-login@v1 - name: Build, tag, and push Docker image run: | docker build -t my-web-app . docker tag my-web-app:latest <account_id>.dkr.ecr.<region>.amazonaws.com/my-web-app:latest docker push <account_id>.dkr.ecr.<region>.amazonaws.com/my-web-app:latest - name: Deploy to ECS uses: aws-actions/amazon-ecs-deploy-task-definition@v1 with: cluster: my-cluster service: my-service task-definition: my-task-definition Summary Dockerize Your Application : Create a Dockerfile, build and test the Docker image. Set Up AWS Infrastructure : Create an ECR repository, push the Docker image, and configure ECS. Deploy to AWS : Set up ECS clusters, task definitions, services, and load balancing. Automate Deployment : Use CI/CD tools to streamline the deployment process. This guide outlines the steps needed to deploy a Dockerized application to AWS using ECS, ensuring a scalable and robust deployment solution.","title":"AWS"},{"location":"3.%20hard/AWS/#advanced-task-deploying-a-web-application-with-docker-on-aws","text":"","title":"Advanced Task: Deploying a Web Application with Docker on AWS"},{"location":"3.%20hard/AWS/#overview","text":"This guide will walk you through deploying a web application using Docker on AWS. It includes setting up Docker containers, configuring AWS services, and deploying the application to a scalable environment.","title":"Overview"},{"location":"3.%20hard/AWS/#prerequisites","text":"Basic understanding of Docker Familiarity with AWS services Access to an AWS account A web application (e.g., built with FastAPI, Django, etc.)","title":"Prerequisites"},{"location":"3.%20hard/AWS/#steps","text":"","title":"Steps"},{"location":"3.%20hard/AWS/#1-dockerize-your-application","text":"1.1 Create a Dockerfile Navigate to the root directory of your project. Create a file named Dockerfile and define the Docker image configuration. Example Dockerfile for a Python Web Application: # Use the official Python image from the Docker Hub FROM python:3.9-slim # Set the working directory WORKDIR /app # Copy the dependencies file COPY requirements.txt . # Install dependencies RUN pip install --no-cache-dir -r requirements.txt # Copy the application code COPY . . # Expose the port EXPOSE 8000 # Command to run the application CMD [\"uvicorn\", \"main:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"] 1.2 Build and Test Docker Image # Build the Docker image docker build -t my-web-app . # Run the Docker container locally docker run -p 8000:8000 my-web-app","title":"1. Dockerize Your Application"},{"location":"3.%20hard/AWS/#2-set-up-aws-infrastructure","text":"2.1 Create an AWS Account If you don\u2019t already have an AWS account, create one at aws.amazon.com . 2.2 Set Up AWS CLI Install the AWS CLI on your local machine. Configure it with your AWS credentials. aws configure 2.3 Create an Amazon Elastic Container Registry (ECR) Go to the ECR section in the AWS Management Console. Create a new repository for your Docker images. 2.4 Push Docker Image to ECR # Authenticate Docker with ECR aws ecr get-login-password --region <region> | docker login --username AWS --password-stdin <account_id>.dkr.ecr.<region>.amazonaws.com # Tag the Docker image docker tag my-web-app:latest <account_id>.dkr.ecr.<region>.amazonaws.com/my-web-app:latest # Push the Docker image docker push <account_id>.dkr.ecr.<region>.amazonaws.com/my-web-app:latest","title":"2. Set Up AWS Infrastructure"},{"location":"3.%20hard/AWS/#3-deploy-to-aws","text":"3.1 Create an Amazon Elastic Container Service (ECS) Cluster Go to the ECS section in the AWS Management Console. Create a new cluster for your application. 3.2 Define a Task Definition Create a task definition that specifies how to run your Docker container. Include the Docker image URL from ECR and specify container settings. 3.3 Set Up an ECS Service Create a new service in your ECS cluster using the task definition. Configure it to run a desired number of tasks and set up load balancing if necessary. 3.4 Configure Networking Set up an Application Load Balancer (ALB) to distribute traffic to your ECS tasks. Configure security groups to allow inbound traffic on the required ports (e.g., port 80 for HTTP). 3.5 Launch and Monitor Deploy your ECS service and verify that the application is running correctly. Use CloudWatch to monitor logs and performance metrics.","title":"3. Deploy to AWS"},{"location":"3.%20hard/AWS/#4-automate-deployment-with-cicd","text":"4.1 Set Up a CI/CD Pipeline Use AWS CodePipeline or GitHub Actions to automate the build and deployment process. Define steps to build the Docker image, push it to ECR, and deploy it to ECS. 4.2 Example GitHub Actions Workflow name: Deploy to ECS on: push: branches: - main jobs: deploy: runs-on: ubuntu-latest steps: - name: Checkout code uses: actions/checkout@v2 - name: Set up Docker Buildx uses: docker/setup-buildx-action@v1 - name: Log in to Amazon ECR uses: aws-actions/amazon-ecr-login@v1 - name: Build, tag, and push Docker image run: | docker build -t my-web-app . docker tag my-web-app:latest <account_id>.dkr.ecr.<region>.amazonaws.com/my-web-app:latest docker push <account_id>.dkr.ecr.<region>.amazonaws.com/my-web-app:latest - name: Deploy to ECS uses: aws-actions/amazon-ecs-deploy-task-definition@v1 with: cluster: my-cluster service: my-service task-definition: my-task-definition","title":"4. Automate Deployment with CI/CD"},{"location":"3.%20hard/AWS/#summary","text":"Dockerize Your Application : Create a Dockerfile, build and test the Docker image. Set Up AWS Infrastructure : Create an ECR repository, push the Docker image, and configure ECS. Deploy to AWS : Set up ECS clusters, task definitions, services, and load balancing. Automate Deployment : Use CI/CD tools to streamline the deployment process. This guide outlines the steps needed to deploy a Dockerized application to AWS using ECS, ensuring a scalable and robust deployment solution.","title":"Summary"},{"location":"3.%20hard/AZURE/","text":"Advanced Task: Deploying a Docker Application on Microsoft Azure 1. Dockerize Your Application 1.1 Create a Dockerfile Use the same Dockerfile as in the AWS and GCP sections. 2. Set Up Azure Infrastructure 2.1 Create an Azure Account Sign up or log in to your Azure account at azure.microsoft.com . 2.2 Install and Configure Azure CLI Install the Azure CLI on your local machine. Log in using az login . az login az account set --subscription <your-subscription-id> 2.3 Create an Azure Container Registry (ACR) Create a new container registry through the Azure Portal or CLI. az acr create --resource-group <resource-group> --name <registry-name> --sku Basic 2.4 Push Docker Image to ACR # Log in to ACR az acr login --name <registry-name> # Tag the Docker image docker tag my-web-app <registry-name>.azurecr.io/my-web-app:latest # Push the Docker image docker push <registry-name>.azurecr.io/my-web-app:latest 3. Deploy to Azure Kubernetes Service (AKS) 3.1 Create an AKS Cluster Create a new AKS cluster through the Azure Portal or CLI. az aks create --resource-group <resource-group> --name <aks-cluster-name> --node-count 1 --enable-addons monitoring --generate-ssh-keys 3.2 Deploy Docker Image to AKS Configure kubectl to interact with your AKS cluster. az aks get-credentials --resource-group <resource-group> --name <aks-cluster-name> Create a Kubernetes deployment YAML file (e.g., deployment.yaml ). apiVersion: apps/v1 kind: Deployment metadata: name: my-web-app spec: replicas: 2 selector: matchLabels: app: my-web-app template: metadata: labels: app: my-web-app spec: containers: - name: my-web-app image: <registry-name>.azurecr.io/my-web-app:latest ports: - containerPort: 8000 Apply the deployment: kubectl apply -f deployment.yaml 3.3 Set Up a Load Balancer Expose your deployment using a service YAML file (e.g., service.yaml ). apiVersion: v1 kind: Service metadata: name: my-web-app-service spec: type: LoadBalancer ports: - port: 80 targetPort: 8000 selector: app: my-web-app Apply the service: kubectl apply -f service.yaml 4. Automate Deployment with CI/CD 4.1 Set Up Azure Pipelines Create a pipeline in Azure DevOps or use GitHub Actions for Azure. 4.2 Example Azure Pipeline YAML trigger: - main pool: vmImage: 'ubuntu-latest' steps: - task: Docker@2 inputs: command: 'buildAndPush' containerRegistry: '<your-container-registry-service-connection>' repository: '<registry-name>/my-web-app' dockerfile: '**/Dockerfile' tags: | $(Build.BuildId) - task: Kubernetes@1 inputs: kubernetesServiceEndpoint: '<your-aks-service-connection>' namespace: 'default' command: 'apply' arguments: '-f deployment.yaml -f service.yaml'","title":"Advanced Task: Deploying a Docker Application on Microsoft Azure"},{"location":"3.%20hard/AZURE/#advanced-task-deploying-a-docker-application-on-microsoft-azure","text":"","title":"Advanced Task: Deploying a Docker Application on Microsoft Azure"},{"location":"3.%20hard/AZURE/#1-dockerize-your-application","text":"1.1 Create a Dockerfile Use the same Dockerfile as in the AWS and GCP sections.","title":"1. Dockerize Your Application"},{"location":"3.%20hard/AZURE/#2-set-up-azure-infrastructure","text":"2.1 Create an Azure Account Sign up or log in to your Azure account at azure.microsoft.com . 2.2 Install and Configure Azure CLI Install the Azure CLI on your local machine. Log in using az login . az login az account set --subscription <your-subscription-id> 2.3 Create an Azure Container Registry (ACR) Create a new container registry through the Azure Portal or CLI. az acr create --resource-group <resource-group> --name <registry-name> --sku Basic 2.4 Push Docker Image to ACR # Log in to ACR az acr login --name <registry-name> # Tag the Docker image docker tag my-web-app <registry-name>.azurecr.io/my-web-app:latest # Push the Docker image docker push <registry-name>.azurecr.io/my-web-app:latest","title":"2. Set Up Azure Infrastructure"},{"location":"3.%20hard/AZURE/#3-deploy-to-azure-kubernetes-service-aks","text":"3.1 Create an AKS Cluster Create a new AKS cluster through the Azure Portal or CLI. az aks create --resource-group <resource-group> --name <aks-cluster-name> --node-count 1 --enable-addons monitoring --generate-ssh-keys 3.2 Deploy Docker Image to AKS Configure kubectl to interact with your AKS cluster. az aks get-credentials --resource-group <resource-group> --name <aks-cluster-name> Create a Kubernetes deployment YAML file (e.g., deployment.yaml ). apiVersion: apps/v1 kind: Deployment metadata: name: my-web-app spec: replicas: 2 selector: matchLabels: app: my-web-app template: metadata: labels: app: my-web-app spec: containers: - name: my-web-app image: <registry-name>.azurecr.io/my-web-app:latest ports: - containerPort: 8000 Apply the deployment: kubectl apply -f deployment.yaml 3.3 Set Up a Load Balancer Expose your deployment using a service YAML file (e.g., service.yaml ). apiVersion: v1 kind: Service metadata: name: my-web-app-service spec: type: LoadBalancer ports: - port: 80 targetPort: 8000 selector: app: my-web-app Apply the service: kubectl apply -f service.yaml","title":"3. Deploy to Azure Kubernetes Service (AKS)"},{"location":"3.%20hard/AZURE/#4-automate-deployment-with-cicd","text":"4.1 Set Up Azure Pipelines Create a pipeline in Azure DevOps or use GitHub Actions for Azure. 4.2 Example Azure Pipeline YAML trigger: - main pool: vmImage: 'ubuntu-latest' steps: - task: Docker@2 inputs: command: 'buildAndPush' containerRegistry: '<your-container-registry-service-connection>' repository: '<registry-name>/my-web-app' dockerfile: '**/Dockerfile' tags: | $(Build.BuildId) - task: Kubernetes@1 inputs: kubernetesServiceEndpoint: '<your-aks-service-connection>' namespace: 'default' command: 'apply' arguments: '-f deployment.yaml -f service.yaml'","title":"4. Automate Deployment with CI/CD"},{"location":"3.%20hard/GCP/","text":"Advanced Task: Deploying a Docker Application on GCP (Google Cloud Platform) 1. Dockerize Your Application 1.1 Create a Dockerfile Ensure your application is Dockerized with a Dockerfile similar to the one provided in the AWS section. 2. Set Up GCP Infrastructure 2.1 Create a Google Cloud Account Sign up or log in to your Google Cloud account at cloud.google.com . 2.2 Install and Configure Google Cloud SDK Install the Google Cloud SDK on your local machine. Authenticate using gcloud auth login . gcloud auth login gcloud config set project <your-project-id> 2.3 Create a Google Container Registry (GCR) Navigate to the Container Registry section in the GCP Console. Create a new repository or use the existing one. 2.4 Push Docker Image to GCR # Tag the Docker image docker tag my-web-app gcr.io/<your-project-id>/my-web-app:latest # Push the Docker image docker push gcr.io/<your-project-id>/my-web-app:latest 3. Deploy to Google Kubernetes Engine (GKE) 3.1 Create a GKE Cluster Go to the Kubernetes Engine section in the GCP Console. Create a new cluster with desired specifications. 3.2 Deploy Docker Image to GKE Configure kubectl to interact with your GKE cluster. gcloud container clusters get-credentials <cluster-name> --zone <zone> Create a Kubernetes deployment YAML file (e.g., deployment.yaml ). apiVersion: apps/v1 kind: Deployment metadata: name: my-web-app spec: replicas: 2 selector: matchLabels: app: my-web-app template: metadata: labels: app: my-web-app spec: containers: - name: my-web-app image: gcr.io/<your-project-id>/my-web-app:latest ports: - containerPort: 8000 Apply the deployment: kubectl apply -f deployment.yaml 3.3 Set Up a Load Balancer Expose your deployment using a service YAML file (e.g., service.yaml ). apiVersion: v1 kind: Service metadata: name: my-web-app-service spec: type: LoadBalancer ports: - port: 80 targetPort: 8000 selector: app: my-web-app Apply the service: kubectl apply -f service.yaml 4. Automate Deployment with CI/CD 4.1 Set Up Cloud Build Create a cloudbuild.yaml file for Google Cloud Build. steps: - name: 'gcr.io/cloud-builders/docker' args: ['build', '-t', 'gcr.io/$PROJECT_ID/my-web-app:$COMMIT_SHA', '.'] - name: 'gcr.io/cloud-builders/docker' args: ['push', 'gcr.io/$PROJECT_ID/my-web-app:$COMMIT_SHA'] images: - 'gcr.io/$PROJECT_ID/my-web-app:$COMMIT_SHA' Trigger builds using Google Cloud Build. gcloud builds submit --config cloudbuild.yaml","title":"Advanced Task: Deploying a Docker Application on GCP (Google Cloud Platform)"},{"location":"3.%20hard/GCP/#advanced-task-deploying-a-docker-application-on-gcp-google-cloud-platform","text":"","title":"Advanced Task: Deploying a Docker Application on GCP (Google Cloud Platform)"},{"location":"3.%20hard/GCP/#1-dockerize-your-application","text":"1.1 Create a Dockerfile Ensure your application is Dockerized with a Dockerfile similar to the one provided in the AWS section.","title":"1. Dockerize Your Application"},{"location":"3.%20hard/GCP/#2-set-up-gcp-infrastructure","text":"2.1 Create a Google Cloud Account Sign up or log in to your Google Cloud account at cloud.google.com . 2.2 Install and Configure Google Cloud SDK Install the Google Cloud SDK on your local machine. Authenticate using gcloud auth login . gcloud auth login gcloud config set project <your-project-id> 2.3 Create a Google Container Registry (GCR) Navigate to the Container Registry section in the GCP Console. Create a new repository or use the existing one. 2.4 Push Docker Image to GCR # Tag the Docker image docker tag my-web-app gcr.io/<your-project-id>/my-web-app:latest # Push the Docker image docker push gcr.io/<your-project-id>/my-web-app:latest","title":"2. Set Up GCP Infrastructure"},{"location":"3.%20hard/GCP/#3-deploy-to-google-kubernetes-engine-gke","text":"3.1 Create a GKE Cluster Go to the Kubernetes Engine section in the GCP Console. Create a new cluster with desired specifications. 3.2 Deploy Docker Image to GKE Configure kubectl to interact with your GKE cluster. gcloud container clusters get-credentials <cluster-name> --zone <zone> Create a Kubernetes deployment YAML file (e.g., deployment.yaml ). apiVersion: apps/v1 kind: Deployment metadata: name: my-web-app spec: replicas: 2 selector: matchLabels: app: my-web-app template: metadata: labels: app: my-web-app spec: containers: - name: my-web-app image: gcr.io/<your-project-id>/my-web-app:latest ports: - containerPort: 8000 Apply the deployment: kubectl apply -f deployment.yaml 3.3 Set Up a Load Balancer Expose your deployment using a service YAML file (e.g., service.yaml ). apiVersion: v1 kind: Service metadata: name: my-web-app-service spec: type: LoadBalancer ports: - port: 80 targetPort: 8000 selector: app: my-web-app Apply the service: kubectl apply -f service.yaml","title":"3. Deploy to Google Kubernetes Engine (GKE)"},{"location":"3.%20hard/GCP/#4-automate-deployment-with-cicd","text":"4.1 Set Up Cloud Build Create a cloudbuild.yaml file for Google Cloud Build. steps: - name: 'gcr.io/cloud-builders/docker' args: ['build', '-t', 'gcr.io/$PROJECT_ID/my-web-app:$COMMIT_SHA', '.'] - name: 'gcr.io/cloud-builders/docker' args: ['push', 'gcr.io/$PROJECT_ID/my-web-app:$COMMIT_SHA'] images: - 'gcr.io/$PROJECT_ID/my-web-app:$COMMIT_SHA' Trigger builds using Google Cloud Build. gcloud builds submit --config cloudbuild.yaml","title":"4. Automate Deployment with CI/CD"}]}